<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/dio-spring-security-jwt/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/dio-spring-security-jwt/README.md" />
              <option name="originalContent" value="# dio-spring-security-jwt&#10;&#10;Este projeto demonstra a implementação de autenticação e autorização utilizando Spring Security com JWT (JSON Web Token) em uma API REST. O objetivo é apresentar um exemplo prático de como proteger rotas e gerenciar usuários em uma aplicação Java utilizando banco de dados H2.&#10;&#10;## Proposta&#10;&#10;A proposta do projeto é servir como referência para quem deseja aprender ou implementar autenticação baseada em JWT no Spring Boot, incluindo cadastro de usuários, login e proteção de rotas por perfil de acesso.&#10;&#10;## Funcionalidades&#10;&#10;- Cadastro de usuários no banco H2&#10;- Login e geração de token JWT&#10;- Proteção de rotas por perfil (usuário, gerente)&#10;&#10;## Como executar&#10;&#10;1. Clone o repositório:&#10;   ```bash&#10;   git clone &lt;url-do-repositorio&gt;&#10;   ```&#10;2. Acesse a pasta do projeto:&#10;   ```bash&#10;   cd dio-spring-security-jwt&#10;   ```&#10;3. Execute o projeto:&#10;   ```bash&#10;   ./mvnw spring-boot:run&#10;   ```&#10;4. Acesse o banco H2 em [http://localhost:8080/h2-console](http://localhost:8080/h2-console)&#10;&#10;## Endpoints principais&#10;&#10;- `POST /login` - Realiza o login e retorna o token JWT&#10;- `POST /users` - Cadastra um novo usuário&#10;- `GET /users` - Lista usuários (rota protegida)&#10;- `GET /managers` - Lista gerentes (rota protegida)&#10;&#10;## Observações&#10;&#10;- O banco de dados utilizado é o H2, em memória.&#10;- As rotas protegidas exigem o envio do token JWT no header `Authorization`.&#10;- O projeto está em desenvolvimento e sujeito a melhorias.&#10;" />
              <option name="updatedContent" value="# dio-spring-security-jwt&#10;&#10;Este projeto demonstra a implementação de autenticação e autorização utilizando Spring Security com JWT (JSON Web Token) em uma API REST. O objetivo é apresentar um exemplo prático de como proteger rotas e gerenciar usuários em uma aplicação Java utilizando banco de dados H2.&#10;&#10;## Proposta&#10;&#10;A proposta do projeto é servir como referência para quem deseja aprender ou implementar autenticação baseada em JWT no Spring Boot, incluindo cadastro de usuários, login e proteção de rotas por perfil de acesso.&#10;&#10;## Funcionalidades&#10;&#10;- Cadastro de usuários no banco H2&#10;- Login e geração de token JWT&#10;- Proteção de rotas por perfil (usuário, gerente)&#10;&#10;## Como executar&#10;&#10;1. Clone o repositório:&#10;   ```bash&#10;   git clone &lt;url-do-repositorio&gt;&#10;   ```&#10;2. Acesse a pasta do projeto:&#10;   ```bash&#10;   cd dio-spring-security-jwt&#10;   ```&#10;3. Execute o projeto:&#10;   ```bash&#10;   ./mvnw spring-boot:run&#10;   ```&#10;4. Acesse o banco H2 em [http://localhost:8080/h2-console](http://localhost:8080/h2-console)&#10;&#10;## Endpoints principais&#10;&#10;- `POST /login` - Realiza o login e retorna o token JWT&#10;- `POST /users` - Cadastra um novo usuário&#10;- `GET /users` - Lista usuários (rota protegida)&#10;- `GET /managers` - Lista gerentes (rota protegida)&#10;&#10;## Como consumir a API&#10;&#10;### 1. Cadastro de usuário&#10;&#10;Envie uma requisição POST para `/users` com o corpo JSON contendo os dados do usuário. Certifique-se de incluir o prefixo `ROLE_` no campo de perfil (por exemplo, `ROLE_USER` ou `ROLE_MANAGER`). Exemplo:&#10;&#10;```json&#10;{&#10;  &quot;username&quot;: &quot;usuario&quot;,&#10;  &quot;password&quot;: &quot;senha&quot;,&#10;  &quot;role&quot;: &quot;ROLE_USER&quot;&#10;}&#10;```&#10;&#10;### 2. Login&#10;&#10;Envie uma requisição POST para `/login` com o corpo JSON contendo o usuário e senha cadastrados:&#10;&#10;```json&#10;{&#10;  &quot;username&quot;: &quot;usuario&quot;,&#10;  &quot;password&quot;: &quot;senha&quot;&#10;}&#10;```&#10;&#10;A resposta será um token JWT. Exemplo:&#10;&#10;```json&#10;{&#10;  &quot;token&quot;: &quot;seu_token_jwt_aqui&quot;&#10;}&#10;```&#10;&#10;### 3. Acesso às rotas protegidas&#10;&#10;Para acessar rotas protegidas como `/users` ou `/managers`, envie o token JWT no header `Authorization`:&#10;&#10;```&#10;Authorization: Bearer seu_token_jwt_aqui&#10;```&#10;&#10;Exemplo usando cURL:&#10;&#10;```bash&#10;curl -H &quot;Authorization: Bearer seu_token_jwt_aqui&quot; http://localhost:8080/users&#10;```&#10;&#10;---&#10;&#10;Fique à vontade para contribuir ou relatar problemas.&#10;&#10;## Observações&#10;&#10;- O banco de dados utilizado é o H2, em memória.&#10;- As rotas protegidas exigem o envio do token JWT no header `Authorization`.&#10;- O projeto está em desenvolvimento e sujeito a melhorias." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>